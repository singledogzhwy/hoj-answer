hdoj code 1005
#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int f(int a,int b,int i)
{
    if( i==1 || i==2 ) return 1;
    else return ((a*f(a,b,i-1)) + (b*f(a,b,i-2))) %7 ;
}
int main()
{
    int a,b,n;
    while(cin>>a>>b>>n)
    {
        if(a==0 &&b==0 && n==0) return 0;
        printf("%d\n",f(a,b,n%49));
        //这题我第一次MLE了，想了一会才发现答案是以49为周期循环的
    }
}
--------------------------------------------------------------------------------------------------------
hdoj code 1006
//指针间的度数要在d到360-d之间,即解三个|ax+b|型的不等式：（s为唯一未知数），可以求出任意一分钟内的秒针取值范围，然后每分钟都求一遍。
#include <stdio.h>
#include <stdlib.h>
struct set
{
    double a,b;
};
double d;
struct set sloveset(double a,double b);         
struct set intersection(struct set a,struct set b);         
int main()
{
    int h,m,i,j,k;
    double a1,b1,a2,b2,a3,b3,time;
    struct set answer[3][2],ensemble;
    while(scanf("%lf",&d)&&d!=-1)
    {
        time=0;
        for(h=0; h<12; h++)
        {
            for(m=0; m<60; m++)
            {
                b1=6.0*m;                a1=-5.9;
                b2=30*h+0.5*m;            a2=1.0/120-6.0;
                b3=30*h+(0.5-6)*m;         a3=(1.0/120)-0.1;

                answer[0][0]=sloveset(a1,b1);              answer[0][1]=sloveset(-a1,-b1);
                answer[1][0]=sloveset(a2,b2);              answer[1][1]=sloveset(-a2,-b2);
                answer[2][0]=sloveset(a3,b3);              answer[2][1]=sloveset(-a3,-b3);
                
                for(i=0;i<2;i++)
                {
                    for(j=0;j<2;j++)
                    {
                        for(k=0;k<2;k++)
                        {
                            ensemble=intersection(intersection(answer[0][i],answer[1][j]),answer[2][k]);
                            time+=ensemble.b-ensemble.a; } } }
            }
        }
        time=time*100.0/(12*3600);
        printf("%.3lf\n",time);
    }
    return 0;
}
struct set sloveset(double a,double b)
{
    struct set seta;
    if(a>0)
    {
        seta.a=(d-b)/a;
        seta.b=(360-d-b)/a;
    }
    else
    {
        seta.b=(d-b)/a;
        seta.a=(360-d-b)/a;
    }
    if(seta.a<0) seta.a=0;
    if(seta.b>60) seta.b=60;
    if(seta.a>=seta.b) seta.a=seta.b=0; 
    return seta;              
}
struct set intersection(struct set a,struct set b)
{
    struct set p;
    p.a=a.a>b.a ?a.a:b.a;
    p.b=a.b<b.b ?a.b:b.b;
    if(p.a>p.b) p.a=p.b=0;
    return p;
}
-----------------------------------------------
code 1007  //经典最近点对，分治法
#include <algorithm>   
using namespace std;  
#include <stdio.h>   
#include <math.h>   
struct Point  
{  
    double x;  
    double y;  
};  
int num;  
Point points[100001];  
Point assist[100001];  
  
inline bool cmpx(Point a ,Point b )   
{   
    return a.x < b.x;  
}   
inline bool cmpy(Point a ,Point b )   
{   
    return a.y < b.y;  
}   
inline double space(Point a, Point b)  
{  
    return (a.x - b.x)*(a.x - b.x) + (a.y - b.y)*(a.y - b.y);  
}  
inline double minBinary(double a,double b)  
{  
    return a<b?a:b;  
}  
double binarySlove(int l,int r,Point* p)  
{  
    if(r-l==1)  
        return space(p[l],p[r]);  
    if(r-l==2)  
        return minBinary(minBinary(space(p[l],p[l+1]),space(p[l],p[r])),space(p[l+1],p[r]));  
    int half=(l+r)/2;  
    double min=minBinary(binarySlove(l,half,p),binarySlove(half+1,r,p));  
    double sqrtMin=sqrt(min);  
    int cnt=0;  
    for (int i=l;i<=r;i++)  
        if(points[i].x<points[half].x+sqrtMin&&points[i].x>points[half].x-sqrtMin)  
            assist[cnt++]=points[i];  
    sort(assist,assist+cnt,cmpy);  
    for (int i=0;i<cnt;i++)  
        for (int j=i+1;j<cnt;j++)  
        {  
            if(assist[j].y-assist[i].y>sqrtMin)  
                break;  
            min=minBinary(min,space(assist[i],assist[j]));  
        }  
        return min;  
}  
int main()  
{  
    //freopen("Quoit Design.txt","r",stdin);   
    while(scanf("%d",&num)!=EOF&&num)  
    {  
        int min=0;  
        for (int i=0;i<num;i++)  
        {  
            scanf("%lf%lf",&(points[i].x),&(points[i].y));  
        }  
        sort(points,points+num,cmpx);  
        double result=binarySlove(0,num-1,points);  
        printf("%.2lf\n",sqrt(result)/2);  
    }  
    return 0;  
}
---------------------------------------
code 1008   //shuiti
#include<stdio.h>
#include<iostream>
#include<string.h>
#include<memory.h>
using namespace std;
int main(){
   int n;
   int result[100];
   while(scanf("%d",&n)&&n!=0){
        int total=0,start=0;
        for(int i=0;i<n;i++){
            scanf("%d",&result[i]);
        }
        for(int i=0;i<n;i++){
            //上楼
            if(result[i]>start){
                total+=(result[i]-start)*6+5;
                start=result[i];
            }else if(result[i]<start){//下楼
                total+=(start-result[i])*4+5;
                start=result[i];
            }else{//不动
                total+=5;
            }
        }
        printf("%d\n",total);
   }
}
