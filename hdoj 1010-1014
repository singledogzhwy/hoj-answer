code 1010               
 // 讲道理，用dfs加一个计数器就行了。但神奇的是结果TLE，看来还没达到要求。于是就要进行剪枝，详细过程我就不写了，复制一下网上的解释
 //其实刚开始我是不会的。看着解释想了好久
 //方格中起点（tx，ty）和终点（dx, dy）最小步骤是minstep=abs(tx-dx)+abs(ty-dy);

//给定步数t，从起点走到终点，如果t < minstep,不可以，如果t =minstep,一部也没有多走，如果t> minstep,则多走了extra步,extra=t-minstep;

//经过推导可以证明多走的一定是偶数步，即extra一定是偶数。

//现在，如果已经走了n步，到达了（x，y）的位置，现在距离终点最小距离是L=abs(x-dx)+abs(y-dy); 现在还可以走的是 t - n 步，如果（t-n）<0,则不能走到地方，如果（t- n）-L 是奇数，则无法多走出偶数步到达指定位置，所以这样的是不行的；

//同时，本题时间卡的比较紧，使用dfs事实上是构造可行方案树，有m步最后就有2^m个叶子，所以在进入下一层dfs之前判断是否可行可以减少一大部分叶子；
//这题是前面几道题里比较麻烦的。
#include<iostream>
 #include<math.h>
 
 using namespace std;
 int n,m,t,k,dx,dy;
     int p,q,tm;
     int dir[4][2]={{-1,0},{0,1},{1,0},{0,-1}};
 char a[8][8];
 void dfs(int x,int y,int count)
 {
     int temp;
     temp=t-count-abs(dx-x)-abs(dy-y);
     if(temp<0||temp%2==1)                    
         return ;
 
     int tx,ty;
         for(int i=0;i<4;i++)                
         {
             tx=x+dir[i][0];
             ty=y+dir[i][1];
             if(a[tx][ty]=='D'&&count==t-1)
             {
                 k=1;
                 return ;
             }
             if(a[tx][ty]=='.'&&(tx>=0&&tx<n)&&(ty>=0&&ty<m))
             {
                 a[tx][ty]='X';
                 dfs(tx,ty,count+1);
                 a[tx][ty]='.';
                 if(k==1)          
                     return ;
             }
         }
     
 }
 int main()
 {
     while(cin>>n>>m>>t&&n!=0||m!=0||t!=0)
     {
         tm=0;
         for(int i=0;i<n;i++)
         {
             for(int j=0;j<m;j++)
             {
                 cin>>a[i][j];
                 if(a[i][j]=='S')
                 {
                     p=i;q=j;
                 }
                 if(a[i][j]=='D')
                 {
                     dx=i;dy=j;
                 }
                 if(a[i][j]=='X')
                     tm++;
             }
         }
         k=0;
         if(n*m-tm<=t)    
         {
             printf("NO\n");
             continue;
         }
         dfs(p,q,0);
         if(k==1)
             printf("YES\n");
         else
             printf("NO\n");
     }
     return 0;
 }----------------------------------------------
 
 code 1011    //用树形dp解决，dp公式是value[u][j] = max(value[u][j], value[u][j-k]+value[v][k])这里value[u][j]表示以u为根节点，
 //j为trooper数可收获的最大brain数，其中，k的取值范围是0~（j-r），r是根节点u需要消耗的trooper数，v表示的是u的所有邻接点集合。
 #include<iostream>
#include<string.h>
using namespace std;

typedef struct{
    int bugs;
    int brains;
}Room;

Room rooms[101];
int value[101][101];
int matrix[101][101];
int visited[101];
int m, n;

int max(int a,int b)
{
return a>b?a:b;
}

void dpTree(int u)
{
    int i, j, k, v, r;
    visited[u] = 1;
    r = (rooms[u].bugs+19)/20;
    for(i=m; i>=r; i--){
        value[u][i] = rooms[u].brains;
    }
    for(v=1; v<=n; v++){
        if(matrix[u][v] && !visited[v]){
            dpTree(v);
            for(j=m; j>=r; j--){
                for(k=1; k<=j-r; k++){
                    value[u][j] = max(value[u][j], value[u][j-k]+value[v][k]);
                }
            }
        }
    }
}

int main()
{
    int i, j, u, v;

    while(scanf("%d%d", &n, &m) != EOF){
        if(n == -1){
            break;
        }
        memset(rooms, 0, sizeof(rooms));
        memset(matrix, 0, sizeof(matrix));
        memset(visited, 0, sizeof(visited));
        memset(value, 0, sizeof(value));
        for(i=1; i<=n; i++){
            scanf("%d%d", &rooms[i].bugs, &rooms[i].brains);
        }
        for(i=1; i<n; i++){
            scanf("%d%d", &u, &v);
            matrix[u][v] = matrix[v][u] = 1;
        }
        if(m == 0){
            printf("0\n");
            continue;
        }
        dpTree(1);
        printf("%d\n", value[1][m]);
    }
    return 0;
}----------------------------------------------
code 1012//水题一道，输出的时候要小心坑
#include <stdio.h>
#include<math.h>
long int f(int n)
{
	if(n==0||n==1)
		return 1;
	else
		return n*f(n-1);
}
double sum(int n)
{
	int i;
	double s=0.000000000;
	for(i=0; i<=n;i++)
	{
		s+=(double)1/f(i);//搞这么麻烦是因为怕double算着慢。
 }
	return s;
}
int main()
{
	int i;
	printf("n e\n");
	printf("- -----------\n");
	for(i=0;i<=9;i++)
	{
		if(i==0)
		{
			printf("%d %d\n",i,1);
		}
		else if(i==1)
		{
			printf("%d %d\n",i,2);
		}
		else if(i==2)
		{
			printf("%d %.1f\n",i,2.5);
		}
		else 
		{
			printf("%d %.9lf\n",i,sum(i));//搞这么麻烦是因为样例上的输出是0 1; 1 2; 2 2.5;之后才是9位小数 
  }
	}
	return 0;
}--------------------------------
code 1013
#include<cstdio>//水题一个，考察字符串的操作
#include<string.h>
#include<math.h>

int root(int a)

{

int t=0;

while(a>9)

{

t+=a%10;

a=(a-a%10)/10;

}

if(t+a>9) t=root(t+a);

else t+=a;

return t;

}

int main()

{

char c[1001];

while(scanf("%s",c)!=EOF && (c[0]!='0'))

{

int a=0,i;

for(i=0; c[i]!='\0'; i++)

{

a=a+c[i]-'0';

}

printf("%d\n",root(a));

memset(c,0,sizeof(c));

}

return 0;

}--------------------------------
code 1014//先一直计算seed值，建一个标记数组p初始化为0，当seed值出现为x时令p[x]==1；当重复了就退出循环。然后判断一下p[]是否全为1就行了。
#include<iostream>
#include<cstring>
#include<iomanip>
using namespace std;
 
int p[100000];
 
bool allOnes(int mod){//判断
    for(int i=0;i<mod;i++)
        if(p[i]==0 || p[i]>1)
            return false;
    return true;
}
 
int main()
{
    int step,mod;
    while(cin>>step>>mod)
    {
 
        memset(p,0,sizeof(p));
        for(int i=0;p[0]==0||i!=0;i=(i+step)%mod)
            p[i]++;
        cout<<setiosflags(ios::right)<<setw(10)<<step;
        cout<<setiosflags(ios::right)<<setw(10)<<mod;
        if(allOnes(mod))
            cout<<setw(4)<<""<<"Good Choice\n"<<endl;
        else
            cout<<setw(4)<<""<<"Bad Choice\n"<<endl;
    }
    return 0;
}
